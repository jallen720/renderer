#pragma once

#include "ctk/ctk.h"

////////////////////////////////////////////////////////////
/// Data
////////////////////////////////////////////////////////////
struct Core {
    struct {
        CTK_Stack *perma;
        CTK_Stack *temp;
    } mem;
};

enum {
    KEY_0,
    KEY_1,
    KEY_2,
    KEY_3,
    KEY_4,
    KEY_5,
    KEY_6,
    KEY_7,
    KEY_8,
    KEY_9,
    KEY_A,
    KEY_B,
    KEY_C,
    KEY_D,
    KEY_E,
    KEY_F,
    KEY_G,
    KEY_H,
    KEY_I,
    KEY_J,
    KEY_K,
    KEY_L,
    KEY_M,
    KEY_N,
    KEY_O,
    KEY_P,
    KEY_Q,
    KEY_R,
    KEY_S,
    KEY_T,
    KEY_U,
    KEY_V,
    KEY_W,
    KEY_X,
    KEY_Y,
    KEY_Z,
    KEY_MOUSE_0,
    KEY_MOUSE_1,
    KEY_CANCEL,
    KEY_MOUSE_2,
    KEY_MOUSE_3,
    KEY_MOUSE_4,
    KEY_BACK,
    KEY_TAB,
    KEY_CLEAR,
    KEY_RETURN,
    KEY_SHIFT,
    KEY_CONTROL,
    KEY_MENU,
    KEY_PAUSE,
    KEY_CAPITAL,
    KEY_KANA,
    KEY_HANGEUL,
    KEY_HANGUL,
    KEY_JUNJA,
    KEY_FINAL,
    KEY_HANJA,
    KEY_KANJI,
    KEY_ESCAPE,
    KEY_CONVERT,
    KEY_NONCONVERT,
    KEY_ACCEPT,
    KEY_MODECHANGE,
    KEY_SPACE,
    KEY_PRIOR,
    KEY_NEXT,
    KEY_END,
    KEY_HOME,
    KEY_LEFT,
    KEY_UP,
    KEY_RIGHT,
    KEY_DOWN,
    KEY_SELECT,
    KEY_PRINT,
    KEY_EXECUTE,
    KEY_SNAPSHOT,
    KEY_INSERT,
    KEY_DELETE,
    KEY_HELP,
    KEY_LWIN,
    KEY_RWIN,
    KEY_APPS,
    KEY_SLEEP,
    KEY_NUMPAD_0,
    KEY_NUMPAD_1,
    KEY_NUMPAD_2,
    KEY_NUMPAD_3,
    KEY_NUMPAD_4,
    KEY_NUMPAD_5,
    KEY_NUMPAD_6,
    KEY_NUMPAD_7,
    KEY_NUMPAD_8,
    KEY_NUMPAD_9,
    KEY_MULTIPLY,
    KEY_ADD,
    KEY_SEPARATOR,
    KEY_SUBTRACT,
    KEY_DECIMAL,
    KEY_DIVIDE,
    KEY_F1,
    KEY_F2,
    KEY_F3,
    KEY_F4,
    KEY_F5,
    KEY_F6,
    KEY_F7,
    KEY_F8,
    KEY_F9,
    KEY_F10,
    KEY_F11,
    KEY_F12,
    KEY_F13,
    KEY_F14,
    KEY_F15,
    KEY_F16,
    KEY_F17,
    KEY_F18,
    KEY_F19,
    KEY_F20,
    KEY_F21,
    KEY_F22,
    KEY_F23,
    KEY_F24,
    KEY_NAVIGATION_VIEW,
    KEY_NAVIGATION_MENU,
    KEY_NAVIGATION_UP,
    KEY_NAVIGATION_DOWN,
    KEY_NAVIGATION_LEFT,
    KEY_NAVIGATION_RIGHT,
    KEY_NAVIGATION_ACCEPT,
    KEY_NAVIGATION_CANCEL,
    KEY_NUMLOCK,
    KEY_SCROLL,
    KEY_NUMPAD_EQUAL,
    KEY_FJ_JISHO,
    KEY_FJ_MASSHOU,
    KEY_FJ_TOUROKU,
    KEY_FJ_LOYA,
    KEY_FJ_ROYA,
    KEY_LSHIFT,
    KEY_RSHIFT,
    KEY_LCONTROL,
    KEY_RCONTROL,
    KEY_LMENU,
    KEY_RMENU,
    KEY_BROWSER_BACK,
    KEY_BROWSER_FORWARD,
    KEY_BROWSER_REFRESH,
    KEY_BROWSER_STOP,
    KEY_BROWSER_SEARCH,
    KEY_BROWSER_FAVORITES,
    KEY_BROWSER_HOME,
    KEY_VOLUME_MUTE,
    KEY_VOLUME_DOWN,
    KEY_VOLUME_UP,
    KEY_MEDIA_NEXT_TRACK,
    KEY_MEDIA_PREV_TRACK,
    KEY_MEDIA_STOP,
    KEY_MEDIA_PLAY_PAUSE,
    KEY_LAUNCH_MAIL,
    KEY_LAUNCH_MEDIA_SELECT,
    KEY_LAUNCH_APP1,
    KEY_LAUNCH_APP2,
    KEY_SEMICOLON_COLON,
    KEY_PLUS,
    KEY_COMMA,
    KEY_MINUS,
    KEY_PERIOD,
    KEY_SLASH_QUESTION,
    KEY_BACKTICK_TILDE,
    KEY_GAMEPAD_A,
    KEY_GAMEPAD_B,
    KEY_GAMEPAD_X,
    KEY_GAMEPAD_Y,
    KEY_GAMEPAD_RIGHT_SHOULDER,
    KEY_GAMEPAD_LEFT_SHOULDER,
    KEY_GAMEPAD_LEFT_TRIGGER,
    KEY_GAMEPAD_RIGHT_TRIGGER,
    KEY_GAMEPAD_DPAD_UP,
    KEY_GAMEPAD_DPAD_DOWN,
    KEY_GAMEPAD_DPAD_LEFT,
    KEY_GAMEPAD_DPAD_RIGHT,
    KEY_GAMEPAD_MENU,
    KEY_GAMEPAD_VIEW,
    KEY_GAMEPAD_LEFT_THUMBSTICK_BUTTON,
    KEY_GAMEPAD_RIGHT_THUMBSTICK_BUTTON,
    KEY_GAMEPAD_LEFT_THUMBSTICK_UP,
    KEY_GAMEPAD_LEFT_THUMBSTICK_DOWN,
    KEY_GAMEPAD_LEFT_THUMBSTICK_RIGHT,
    KEY_GAMEPAD_LEFT_THUMBSTICK_LEFT,
    KEY_GAMEPAD_RIGHT_THUMBSTICK_UP,
    KEY_GAMEPAD_RIGHT_THUMBSTICK_DOWN,
    KEY_GAMEPAD_RIGHT_THUMBSTICK_RIGHT,
    KEY_GAMEPAD_RIGHT_THUMBSTICK_LEFT,
    KEY_OPEN_BRACKET,
    KEY_BACKSLASH_PIPE,
    KEY_CLOSE_BRACKET,
    KEY_APOSTROPHE_QUOTE,
    KEY_OEM_8,
    KEY_AX,
    KEY_102,
    KEY_ICO_HELP,
    KEY_ICO_00,
    KEY_COUNT,
};

////////////////////////////////////////////////////////////
/// Interface
////////////////////////////////////////////////////////////
static Core *create_core() {
    // Memory
    CTK_Stack *perma_stack = ctk_create_stack(4 * CTK_KILOBYTE);
    auto core = ctk_alloc<Core>(perma_stack);
    core->mem.perma = perma_stack;
    core->mem.temp = ctk_create_stack(perma_stack, CTK_KILOBYTE);

    return core;
}
